import fs from 'fs';
import path from 'path';
import { parseCubeFile } from '../src/core/lutLoader.ts'; // Changed to .ts for tsx
import { ParsedLut } from '../src/core/lutLoader.ts';

// Define paths
const presetsDir = path.join(process.cwd(), 'src', 'presets');
const outputDir = path.join(process.cwd(), 'src', 'presets');
const outputFilePath = path.join(outputDir, 'generatedPresetData.ts');

async function preprocessPresets() {
  console.log('Starting preset preprocessing...');
  try {
    const presetFiles = fs.readdirSync(presetsDir).filter(file => file.endsWith('.cube'));
    const presetEntries: string[] = [];

    console.log(`Found .cube files: ${presetFiles.join(', ')}`);

    for (const file of presetFiles) {
      const filePath = path.join(presetsDir, file);
      console.log(`Processing ${filePath}...`);
      try {
        const cubeText = fs.readFileSync(filePath, 'utf-8');
        const parsedLut = parseCubeFile(cubeText);
        
        const key = path.basename(file, '.cube'); // Use filename as key
        
        // Ensure all ParsedLut fields are present
        const presetObject: ParsedLut = {
          title: parsedLut.title || key,
          size: parsedLut.size,
          domainMin: parsedLut.domainMin || [0, 0, 0],
          domainMax: parsedLut.domainMax || [1, 1, 1],
          // Convert Float32Array to a string representation of an array for reconstruction
          data: parsedLut.data, // Will be handled in string generation
        };

        // Construct the string for a single preset entry
        const dataArrayString = `new Float32Array([${Array.from(presetObject.data).join(', ')}])`;
        const entryString = `
  "${key}": {
    title: "${presetObject.title.replace(/"/g, '\"')}",
    size: ${presetObject.size},
    domainMin: [${presetObject.domainMin.join(', ')}],
    domainMax: [${presetObject.domainMax.join(', ')}],
    data: ${dataArrayString}
  }`;
        presetEntries.push(entryString);
        
        console.log(`Successfully processed and prepared '${file}' as '${key}'`);
      } catch (error) {
        console.error(`Error processing file ${file}:`, error.message);
      }
    }

    const outputFileContent = `// This file is auto-generated by scripts/preprocess-presets.mts
// Do not edit manually!

import { ParsedLut } from '../core/lutLoader';

export const PRESET_DATA: Record<string, ParsedLut> = {${presetEntries.join(',')}${presetEntries.length > 0 ? '\n' : ''}};
`;

    fs.writeFileSync(outputFilePath, outputFileContent);
    console.log(`Preset data successfully written to ${outputFilePath}`);

  } catch (error) {
    console.error('Error during preset preprocessing:', error);
    process.exit(1);
  }
}

preprocessPresets(); 